# Count how many unique proteins were detected in that category.
detected_val_m <- table_m |>
filter(cat==i) |>
select(name_anno) |> pull() |> unique() |> length()
detected_val_s <- table_all |>
filter(cat==i) |>
select(name_anno) |> pull() |> unique() |> length()
# Count how many unique proteins were significant in that category.
significant_val_m <- table_m |>
filter(cat==i) |>
filter(significant==TRUE) |>
select(name_anno) |> pull() |> unique() |> length()
significant_val_s <- table_s |>
filter(cat==i) |>
filter(significant==TRUE) |>
select(name_anno) |> pull() |> unique() |> length()
# Count how many unique proteins were in cl_X in that category.
clu1_val_m <- table_m |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 1") |>
select(name_anno) |> pull() |> unique() |> length()
clu1_val_s <- table_s |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 1") |>
select(name_anno) |> pull() |> unique() |> length()
clu2_val_m <- table_m |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 2") |>
select(name_anno) |> pull() |> unique() |> length()
clu2_val_s <- table_s |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 2") |>
select(name_anno) |> pull() |> unique() |> length()
clu3_val_m <- table_m |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 3") |>
select(name_anno) |> pull() |> unique() |> length()
clu3_val_s <- table_s |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 3") |>
select(name_anno) |> pull() |> unique() |> length()
clu4_val_m <- table_m |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 4") |>
select(name_anno) |> pull() |> unique() |> length()
clu4_val_s <- table_s |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 4") |>
select(name_anno) |> pull() |> unique() |> length()
# How many unique proteins were in clusters 1 or 2 in that category
down_m <- table_m |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 1"|cluster=="Cluster 2") |>
select(name_anno) |> pull() |> unique() |> length()
down_s <- table_s |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 1"|cluster=="Cluster 2") |>
select(name_anno) |> pull() |> unique() |> length()
up_m <- table_m |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 3"|cluster=="Cluster 4") |>
select(name_anno) |> pull() |> unique() |> length()
up_s <- table_s |>
filter(cat==i) |>
filter(significant==TRUE) |>
filter(cluster=="Cluster 3"|cluster=="Cluster 4") |>
select(name_anno) |> pull() |> unique() |> length()
df_fisher[[i]] <- c(detected_val_m,significant_val_m,down_m,up_m,clu1_val_m,clu2_val_m,clu3_val_m,clu4_val_m,
detected_val_s,significant_val_s,down_s,up_s,clu1_val_s,clu2_val_s,clu3_val_s,clu4_val_s)
}
df_fisher_df <- do.call(rbind, df_fisher)
df_fisher_df <- cbind(cat_vect,df_fisher_df)
rownames(df_fisher_df) <- NULL
colnames(df_fisher_df) <- c("category","detected_m","significant_m",
"down_m","up_m","clu1_m","clu2_m","clu3_m",
"clu4_m","detected_s","significant_s","down_s",
"up_s","clu1_s","clu2_s","clu3_s","clu4_s")
df_fisher_df <- df_fisher_df |>
as.data.frame()
df_fisher_df$total_detected_m <- total_detected_m
df_fisher_df$total_sig_m <- total_sig_m
df_fisher_df$total_down_m <- total_down_m
df_fisher_df$total_up_m <- total_up_m
df_fisher_df$total_clu1_m <- total_clu1_m
df_fisher_df$total_clu2_m <- total_clu2_m
df_fisher_df$total_clu3_m <- total_clu3_m
df_fisher_df$total_clu4_m <- total_clu4_m
df_fisher_df$total_detected_s <- total_detected_s
df_fisher_df$total_sig_s <- total_sig_s
df_fisher_df$total_down_s <- total_down_s
df_fisher_df$total_up_s <- total_up_s
df_fisher_df$total_clu1_s <- total_clu1_s
df_fisher_df$total_clu2_s <- total_clu2_s
df_fisher_df$total_clu3_s <- total_clu3_s
df_fisher_df$total_clu4_s <- total_clu4_s
df_fisher_df <- mutate_at(df_fisher_df, 2:33, as.numeric)
sig_m <- c()
down_m <- c()
up_m <- c()
clu1_m <- c()
clu2_m <- c()
clu3_m <- c()
clu4_m <- c()
sig_s <- c()
down_s <- c()
up_s <- c()
clu1_s <- c()
clu2_s <- c()
clu3_s <- c()
clu4_s <- c()
rows <- dim(df_fisher_df)[1]
for (i in 1:rows){
b <- df_fisher_df[i,]
sig_m[i] <- dhyper(b$significant_m,b$total_sig_m, b$total_detected_m-b$total_sig_m,b$detected_m)
down_m[i] <- dhyper(b$down_m,b$total_down_m, b$total_sig_m-b$total_down_m,b$significant_m)
up_m[i] <- dhyper(b$up_m,b$total_up_m, b$total_sig_m-b$total_up_m,b$significant_m)
clu1_m[i] <- dhyper(b$clu1_m,b$total_clu1_m, b$total_sig_m-b$total_clu1_m,b$significant_m)
clu2_m[i] <- dhyper(b$clu2_m,b$total_clu2_m, b$total_sig_m-b$total_clu2_m,b$significant_m)
clu3_m[i] <- dhyper(b$clu3_m,b$total_clu3_m, b$total_sig_m-b$total_clu3_m,b$significant_m)
clu4_m[i] <- dhyper(b$clu4_m,b$total_clu4_m, b$total_sig_m-b$total_clu4_m,b$significant_m)
sig_s[i] <- dhyper(b$significant_s,b$total_sig_s, b$total_detected_s-b$total_sig_s,b$detected_s)
down_s[i] <- dhyper(b$down_s,b$total_down_s, b$total_sig_s-b$total_down_s,b$significant_s)
up_s[i] <- dhyper(b$up_s,b$total_up_s, b$total_sig_s-b$total_up_s,b$significant_s)
clu1_s[i] <- dhyper(b$clu1_s,b$total_clu1_s, b$total_sig_s-b$total_clu1_s,b$significant_s)
clu2_s[i] <- dhyper(b$clu2_s,b$total_clu2_s, b$total_sig_s-b$total_clu2_s,b$significant_s)
clu3_s[i] <- dhyper(b$clu3_s,b$total_clu3_s, b$total_sig_s-b$total_clu3_s,b$significant_s)
clu4_s[i] <- dhyper(b$clu4_s,b$total_clu4_s, b$total_sig_s-b$total_clu4_s,b$significant_s)
}
df_fisher_df$p.val_sig_vs_det_m <- sig_m
df_fisher_df$p.val_down_vs_sig_m <- down_m
df_fisher_df$p.val_up_vs_sig_m <- up_m
df_fisher_df$p.val_clu1_vs_sig_m <- clu1_m
df_fisher_df$p.val_clu2_vs_sig_m <- clu2_m
df_fisher_df$p.val_clu3_vs_sig_m <- clu3_m
df_fisher_df$p.val_clu4_vs_sig_m <- clu4_m
df_fisher_df$p.val_sig_vs_det_m <- sig_m
df_fisher_df$p.val_sig_vs_det_s <- sig_s
df_fisher_df$p.val_down_vs_sig_s <- down_s
df_fisher_df$p.val_up_vs_sig_s <- up_s
df_fisher_df$p.val_clu1_vs_sig_s <- clu1_s
df_fisher_df$p.val_clu2_vs_sig_s <- clu2_s
df_fisher_df$p.val_clu3_vs_sig_s <- clu3_s
df_fisher_df$p.val_clu4_vs_sig_s <- clu4_s
df_fisher_df_res <- df_fisher_df |>
mutate(p.adj_sig_vs_det_m=p.adjust(p.val_sig_vs_det_m,
method = "BH"),
p.adj_down_vs_sig_m=p.adjust(p.val_down_vs_sig_m,
method = "BH"),
p.adj_up_vs_sig_m=p.adjust(p.val_up_vs_sig_m,
method = "BH"),
p.adj_clu1_vs_sig_m=p.adjust(p.val_clu1_vs_sig_m,
method = "BH"),
p.adj_clu2_vs_sig_m=p.adjust(p.val_clu2_vs_sig_m,
method = "BH"),
p.adj_clu3_vs_sig_m=p.adjust(p.val_clu3_vs_sig_m,
method = "BH"),
p.adj_clu4_vs_sig_m=p.adjust(p.val_clu4_vs_sig_m,
method = "BH")) |>
mutate(p.adj_sig_vs_det_s=p.adjust(p.val_sig_vs_det_s,
method = "BH"),
p.adj_down_vs_sig_s=p.adjust(p.val_down_vs_sig_s,
method = "BH"),
p.adj_up_vs_sig_s=p.adjust(p.val_up_vs_sig_s,
method = "BH"),
p.adj_clu1_vs_sig_s=p.adjust(p.val_clu1_vs_sig_s,
method = "BH"),
p.adj_clu2_vs_sig_s=p.adjust(p.val_clu2_vs_sig_s,
method = "BH"),
p.adj_clu3_vs_sig_s=p.adjust(p.val_clu3_vs_sig_s,
method = "BH"),
p.adj_clu4_vs_sig_s=p.adjust(p.val_clu4_vs_sig_s,
method = "BH"))
res <- df_fisher_df_res |> mutate(test_sig_vs_det_m=ifelse(p.adj_sig_vs_det_m>0.05,
"NS",ifelse(significant_m/detected_m>total_sig_m/total_detected_m,"OVER","UNDER")))|>
mutate(test_down_vs_sig_m=ifelse(p.adj_down_vs_sig_m>0.05,
"NS",ifelse(down_m/significant_m>total_down_m/total_sig_m,"OVER","UNDER"))) |>
mutate(test_up_vs_sig_m=ifelse(p.adj_up_vs_sig_m>0.05,
"NS",ifelse(up_m/significant_m>total_up_m/total_sig_m,"OVER","UNDER"))) |>
mutate(test_clu1_vs_sig_m=ifelse(p.adj_clu1_vs_sig_m>0.05,
"NS",ifelse(clu1_m/significant_m>total_clu1_m/total_sig_m,"OVER","UNDER")))|>
mutate(test_clu2_vs_sig_m=ifelse(p.adj_clu2_vs_sig_m>0.05,
"NS",ifelse(clu2_m/significant_m>total_clu2_m/total_sig_m,"OVER","UNDER")))|>
mutate(test_clu3_vs_sig_m=ifelse(p.adj_clu3_vs_sig_m>0.05,
"NS",ifelse(clu3_m/significant_m>total_clu3_m/total_sig_m,"OVER","UNDER")))|>
mutate(test_clu4_vs_sig_m=ifelse(p.adj_clu4_vs_sig_m>0.05,
"NS",ifelse(clu4_m/significant_m>total_clu4_m/total_sig_m,"OVER","UNDER")))|>
mutate(FIGURE_m=ifelse(test_sig_vs_det_m=="NS"&test_down_vs_sig_m=="NS"&test_up_vs_sig_m=="NS","Not in figure","In figure")) |>
mutate(test_sig_vs_det_s=ifelse(p.adj_sig_vs_det_s>0.05,
"NS",ifelse(significant_s/detected_s>total_sig_s/total_detected_s,"OVER","UNDER")))|>
mutate(test_down_vs_sig_s=ifelse(p.adj_down_vs_sig_s>0.05,
"NS",ifelse(down_s/significant_s>total_down_s/total_sig_s,"OVER","UNDER"))) |>
mutate(test_up_vs_sig_s=ifelse(p.adj_up_vs_sig_s>0.05,
"NS",ifelse(up_s/significant_s>total_up_s/total_sig_s,"OVER","UNDER"))) |>
mutate(test_clu1_vs_sig_s=ifelse(p.adj_clu1_vs_sig_s>0.05,
"NS",ifelse(clu1_s/significant_s>total_clu1_s/total_sig_s,"OVER","UNDER")))|>
mutate(test_clu2_vs_sig_s=ifelse(p.adj_clu2_vs_sig_s>0.05,
"NS",ifelse(clu2_s/significant_s>total_clu2_s/total_sig_s,"OVER","UNDER")))|>
mutate(test_clu3_vs_sig_s=ifelse(p.adj_clu3_vs_sig_s>0.05,
"NS",ifelse(clu3_s/significant_s>total_clu3_s/total_sig_s,"OVER","UNDER")))|>
mutate(test_clu4_vs_sig_s=ifelse(p.adj_clu4_vs_sig_s>0.05,
"NS",ifelse(clu4_s/significant_s>total_clu4_s/total_sig_s,"OVER","UNDER")))|>
mutate(FIGURE_s=ifelse(test_sig_vs_det_s=="NS"&test_down_vs_sig_s=="NS"&test_up_vs_sig_s=="NS","Not in figure","In figure"))
res
}
dep[[3]] |> get_results()
dep[[3]] |> get_results() |> View()
plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 20))
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 15))
alpha
pdf(paste0("proteomics/img_IndependentSets/alphatub.pdf"))
alpha
dev.off()
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1,117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 15))
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1","117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 15))
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1","117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 18))
alpha
pdf(paste0("proteomics/img_IndependentSets/alphatub.pdf"))
alpha
dev.off()
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1","117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 18))
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1","117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 17))
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1","117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 16))
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1","117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 14))
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1","117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 18))
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1","117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 18))+
scale_y_continuous(minor_breaks = seq(-1 , 1, 0.2),
breaks = seq(0, 100, 10))
alpha
# Alpha-tubulins
alpha <- plot_single(dep[[3]], proteins = c("146288","A0A6S8DQS1","117061"),
type = "centered") +
theme_minimal() +
ggtitle("Alpha tubulins")+
theme(text = element_text(size = 18))+
scale_y_continuous(minor_breaks = seq(-1 , 1, 0.2),
breaks =seq(-1 , 1, 0.2))
alpha
pdf(paste0("proteomics/img_IndependentSets/alphatub.pdf"))
alpha
dev.off()
#Beta
beta <- plot_single(dep[[3]], proteins = c("A0A6S8FSW4","A0A6S8GDE0"),
type = "centered") +
theme_minimal() +
ggtitle("Beta tubulins")+
theme(text = element_text(size = 18))+
scale_y_continuous(minor_breaks = seq(-1 , 1, 0.2),
breaks =seq(-1 , 1, 0.2))
beta
#Beta
beta <- plot_single(dep[[3]], proteins = c("A0A6S8FSW4","A0A6S8GDE0",
"A0A1J0I0B7"),
type = "centered") +
theme_minimal() +
ggtitle("Beta tubulins")+
theme(text = element_text(size = 18))+
scale_y_continuous(minor_breaks = seq(-1 , 1, 0.2),
breaks =seq(-1 , 1, 0.2))
beta
#Beta
beta <- plot_single(dep[[3]], proteins = c("A0A6S8FSW4","A0A6S8GDE0",
"A0A1J0I0B7",
"70287"),
type = "centered") +
theme_minimal() +
ggtitle("Beta tubulins")+
theme(text = element_text(size = 18))+
scale_y_continuous(minor_breaks = seq(-1 , 1, 0.2),
breaks =seq(-1 , 1, 0.2))
beta
#Beta
beta <- plot_single(dep[[3]], proteins = c("A0A6S8FSW4","A0A6S8GDE0", # Beta
"A0A1J0I0B7", # Beta
"A0A6S8F0Y0","A0A6S8FBM5", # Spoke
"70287","84586" # Mastig
),
type = "centered") +
theme_minimal() +
ggtitle("Beta tubulins")+
theme(text = element_text(size = 18))+
scale_y_continuous(minor_breaks = seq(-1 , 1, 0.2),
breaks =seq(-1 , 1, 0.2))
# Mixed
mix <- plot_single(dep[[3]], proteins = c("A0A6S8FSW4","A0A6S8GDE0", # Beta
"A0A1J0I0B7", # Beta
"A0A6S8F0Y0","A0A6S8FBM5", # Spoke
"70287","84586" # Mastig
),
type = "centered") +
theme_minimal() +
ggtitle("Beta tubulins")+
theme(text = element_text(size = 18))+
scale_y_continuous(minor_breaks = seq(-1 , 1, 0.2),
breaks =seq(-1 , 1, 0.2))
mix
# Mixed
mix <- plot_single(dep[[3]], proteins = c("A0A6S8FSW4","A0A6S8GDE0", # Beta
"A0A1J0I0B7", # Beta
"A0A6S8F0Y0","A0A6S8FBM5", # Spoke
"70287","84586" # Mastig
),
type = "centered") +
theme_minimal() +
ggtitle("Beta tubulins, mastigoneme and spoke")+
theme(text = element_text(size = 18))+
scale_y_continuous(minor_breaks = seq(-1 , 1, 0.2),
breaks =seq(-1 , 1, 0.2))
mix
pdf(paste0("proteomics/img_IndependentSets/mix.pdf"))
mix
dev.off()
# Install BiocManager if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# List of CRAN packages to install
cran_packages <- c("dplyr", "ggplot2", "tidyr", "readr", "purrr", "tibble", "stringr", "forcats")
# List of Bioconductor packages to install
bioc_packages <- c("GenomicFeatures", "AnnotationDbi", "BiocGenerics")
# Install CRAN packages
install.packages(cran_packages)
# Install Bioconductor packages
BiocManager::install(bioc_packages)
# Install BiocManager if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# List of CRAN packages to install
cran_packages <- c("dplyr", "ggplot2", "tidyr", "readr", "purrr", "tibble", "stringr", "forcats")
# List of Bioconductor packages to install
bioc_packages <- c("GenomicFeatures", "AnnotationDbi", "BiocGenerics")
# Install CRAN packages
install.packages(cran_packages)
# Install Bioconductor packages
BiocManager::install(bioc_packages)
library(pacman)
install.packages("pacman")
R.home()
install.packages("pacman")
dir.create(Sys.getenv("R_LIBS_USER"), recursive = TRUE)  # create personal library
.libPaths(Sys.getenv("R_LIBS_USER"))
install.packages("pacman")
pacman::p_load(tidyverse, Biostrings, FactoMineR,
data.table, plotly, DEP, sva,
SummarizedExperiment, ComplexHeatmap,
patchwork, factoextra,
ggrepel, RColorBrewer, ggVennDiagram, grid, here)
library(SummarizedExperiment)
library(tidyverse)
library(data.table)
library(plotly)
library(here)
library(grid)
library(patchwork)
library(sva)
library(RColorBrewer)
library(ggVennDiagram)
library(factoextra)
library(FactoMineR)
library(ComplexHeatmap)
pacman::p_load(igraph)
pacman::p_load(ggplotify,
ggvenn)
library(ggvenn)
library(ggplotify)
p_load(nVennR)
library(pacman)
p_load(nVennR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
pacman::p_load(tidyverse, data.table,plotly,here,grid,patchwork,ggrepel, # CRAN
RColorBrewer,ggVennDiagram,factoextra,FactoMineR, #CRAN
ggplotify,ggvenn, # CRAN
Biostrings,DEP, sva,SummarizedExperiment, ComplexHeatmap)
library(Biostrings)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(Biostrings)
BiocManager::install("GenomeInfoDb")
library(Biostrings)
library(DEP)
BiocManager::install("DEP")
####################################
# Differential enrichment analysis for Proteomics data.
# author: "Alejandro Gil-Gomez"
library(pacman)
pacman::p_load(tidyverse, data.table,plotly,here,grid,patchwork,ggrepel, # CRAN
RColorBrewer,ggVennDiagram,factoextra,FactoMineR, #CRAN
ggplotify,ggvenn, # CRAN
Biostrings,DEP, sva,SummarizedExperiment, ComplexHeatmap)
####################################
# Differential enrichment analysis for Proteomics data.
# author: "Alejandro Gil-Gomez"
library(pacman)
install.packages("pacman")
dir.create(Sys.getenv("R_LIBS_USER"), recursive = TRUE)  # create personal library
.libPaths(Sys.getenv("R_LIBS_USER"))
####################################
# Differential enrichment analysis for Proteomics data.
# author: "Alejandro Gil-Gomez"
library(pacman)
install.packages("pacman")
pacman::p_load(tidyverse, data.table,plotly,here,grid,patchwork,ggrepel, # CRAN
RColorBrewer,ggVennDiagram,factoextra,FactoMineR, #CRAN
ggplotify,ggvenn, # CRAN
Biostrings,DEP, sva,SummarizedExperiment, ComplexHeatmap)
pacman::p_load(tidyverse, data.table,plotly,here,grid,patchwork,ggrepel, # CRAN
RColorBrewer,ggVennDiagram,factoextra,FactoMineR, #CRAN
ggplotify,ggvenn)
BiocManager::install("DEP")
library(DEP)
library("DEP")
BiocManager::install("Biostrings")
BiocManager::install("sva")
BiocManager::install("SummarizedExperiment")
BiocManager::install("ComplexHeatmap")
BiocManager::install("DEP")
library(DEP)
?here
??here
here()
setwd(here())
setwd(here())
getwd()
